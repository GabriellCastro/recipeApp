{"ast":null,"code":"var _jsxFileName = \"/home/gabriel/project/sd-011-project-recipes-app/src/pages/FoodRecipeInProgress.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { getMealDetail } from '../services/theMealAPI';\nimport { saveInProgressFoodRecipes, saveDoneRecipes } from '../helpers/handleLocalStorage';\nimport MainContext from '../context/MainContext';\nimport LSContext from '../context/LSContext';\nimport ShareButton from '../components/ShareButton';\nimport FavoriteButton from '../components/FavoriteButton';\n\nfunction FoodRecipeInProgress({\n  match: {\n    params: {\n      id\n    }\n  }\n}) {\n  const {\n    LSValues: {\n      inProgressRecipes\n    }\n  } = useContext(LSContext);\n  const {\n    LSFunctions: {\n      setInProgressRecipes,\n      setDoneRecipes\n    }\n  } = useContext(LSContext);\n  const [recipe, setRecipe] = useState({});\n  const [usedIngredients, setUsedIngredients] = useState([]);\n  const {\n    setLoading\n  } = useContext(MainContext);\n  const SLICE_NUMBER = -12;\n\n  function listIngredients() {\n    const MAX_INGREDIENTS = 20;\n    const list = [];\n\n    for (let index = 1; index <= MAX_INGREDIENTS; index += 1) {\n      if (recipe[`strIngredient${index}`]) {\n        list.push(`${recipe[`strIngredient${index}`]} - ${recipe[`strMeasure${index}`]}`);\n      }\n    }\n\n    return list;\n  }\n\n  function lineThroughUsedIngredients({\n    target\n  }) {\n    if (target.checked) {\n      const updatedUsedIngredients = [...usedIngredients, target.value];\n      setUsedIngredients(updatedUsedIngredients);\n      saveInProgressFoodRecipes(id, updatedUsedIngredients, setInProgressRecipes);\n    } else {\n      const remainingIngredients = usedIngredients.filter(ingredient => ingredient !== target.value);\n      setUsedIngredients(remainingIngredients);\n      saveInProgressFoodRecipes(id, remainingIngredients, setInProgressRecipes);\n    }\n  }\n\n  useEffect(() => {\n    setLoading(true);\n    getMealDetail(id).then(result => {\n      setRecipe(...result);\n      setLoading(false);\n    });\n  }, [setRecipe, setLoading, id]);\n  useEffect(() => {\n    const mealsIngredients = inProgressRecipes.meals ? inProgressRecipes.meals[id] || [] : [];\n    setUsedIngredients(mealsIngredients);\n  }, [id, inProgressRecipes]);\n  const {\n    strMealThumb,\n    strMeal,\n    strCategory,\n    strInstructions,\n    strArea,\n    strTags\n  } = recipe;\n\n  function GetDate() {\n    const data = new Date();\n    const dia = String(data.getDate()).padStart(2, '0');\n    const mes = String(data.getMonth() + 1).padStart(2, '0');\n    const ano = data.getFullYear();\n    const dataAtual = `${dia}/${mes}/${ano}`;\n    return dataAtual;\n  }\n\n  console.log(recipe);\n  const saveDone = {\n    id,\n    type: 'comida',\n    area: strArea,\n    category: strCategory,\n    alcoholicOrNot: '',\n    name: strMeal,\n    image: strMealThumb,\n    doneDate: GetDate(),\n    tags: strTags ? strTags.split(',') : []\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: strMealThumb,\n    \"data-testid\": \"recipe-photo\",\n    alt: strMeal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    \"data-testid\": \"recipe-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, strMeal), /*#__PURE__*/React.createElement(ShareButton, {\n    link: window.location.href.slice(0, SLICE_NUMBER),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FavoriteButton, {\n    recipeData: recipe,\n    type: \"comida\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"recipe-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, strCategory), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, listIngredients().map((ingredient, index) => /*#__PURE__*/React.createElement(\"label\", {\n    className: usedIngredients.includes(ingredient) ? 'ingredient-checked' : '',\n    htmlFor: index,\n    \"data-testid\": `${index}-ingredient-step`,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    checked: usedIngredients.includes(ingredient),\n    value: ingredient,\n    type: \"checkbox\",\n    id: index,\n    name: \"ingredients\",\n    onClick: lineThroughUsedIngredients,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }), ingredient))), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"instructions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, strInstructions), /*#__PURE__*/React.createElement(Link, {\n    to: \"/receitas-feitas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    \"data-testid\": \"finish-recipe-btn\",\n    disabled: listIngredients().length !== usedIngredients.length,\n    onClick: () => saveDoneRecipes(saveDone, setDoneRecipes),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, \"Finalizar Receita\")));\n}\n\nFoodRecipeInProgress.propTypes = {\n  match: PropTypes.shape(PropTypes.any).isRequired\n};\nexport default FoodRecipeInProgress;","map":{"version":3,"sources":["/home/gabriel/project/sd-011-project-recipes-app/src/pages/FoodRecipeInProgress.js"],"names":["React","useEffect","useState","useContext","PropTypes","Link","getMealDetail","saveInProgressFoodRecipes","saveDoneRecipes","MainContext","LSContext","ShareButton","FavoriteButton","FoodRecipeInProgress","match","params","id","LSValues","inProgressRecipes","LSFunctions","setInProgressRecipes","setDoneRecipes","recipe","setRecipe","usedIngredients","setUsedIngredients","setLoading","SLICE_NUMBER","listIngredients","MAX_INGREDIENTS","list","index","push","lineThroughUsedIngredients","target","checked","updatedUsedIngredients","value","remainingIngredients","filter","ingredient","then","result","mealsIngredients","meals","strMealThumb","strMeal","strCategory","strInstructions","strArea","strTags","GetDate","data","Date","dia","String","getDate","padStart","mes","getMonth","ano","getFullYear","dataAtual","console","log","saveDone","type","area","category","alcoholicOrNot","name","image","doneDate","tags","split","window","location","href","slice","map","includes","length","propTypes","shape","any","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { getMealDetail } from '../services/theMealAPI';\nimport { saveInProgressFoodRecipes,\n  saveDoneRecipes } from '../helpers/handleLocalStorage';\nimport MainContext from '../context/MainContext';\nimport LSContext from '../context/LSContext';\nimport ShareButton from '../components/ShareButton';\nimport FavoriteButton from '../components/FavoriteButton';\n\nfunction FoodRecipeInProgress({ match: { params: { id } } }) {\n  const { LSValues: { inProgressRecipes } } = useContext(LSContext);\n  const { LSFunctions: { setInProgressRecipes, setDoneRecipes } } = useContext(LSContext);\n  const [recipe, setRecipe] = useState({});\n  const [usedIngredients, setUsedIngredients] = useState([]);\n  const { setLoading } = useContext(MainContext);\n  const SLICE_NUMBER = -12;\n\n  function listIngredients() {\n    const MAX_INGREDIENTS = 20;\n    const list = [];\n    for (let index = 1; index <= MAX_INGREDIENTS; index += 1) {\n      if (recipe[`strIngredient${index}`]) {\n        list.push(\n          `${recipe[`strIngredient${index}`]} - ${recipe[`strMeasure${index}`]}`,\n        );\n      }\n    }\n    return list;\n  }\n\n  function lineThroughUsedIngredients({ target }) {\n    if (target.checked) {\n      const updatedUsedIngredients = [...usedIngredients, target.value];\n      setUsedIngredients(updatedUsedIngredients);\n      saveInProgressFoodRecipes(id, updatedUsedIngredients, setInProgressRecipes);\n    } else {\n      const remainingIngredients = usedIngredients\n        .filter((ingredient) => ingredient !== target.value);\n      setUsedIngredients(remainingIngredients);\n      saveInProgressFoodRecipes(id, remainingIngredients, setInProgressRecipes);\n    }\n  }\n\n  useEffect(() => {\n    setLoading(true);\n    getMealDetail(id)\n      .then((result) => {\n        setRecipe(...result);\n        setLoading(false);\n      });\n  }, [setRecipe, setLoading, id]);\n\n  useEffect(() => {\n    const mealsIngredients = inProgressRecipes.meals\n      ? inProgressRecipes.meals[id] || []\n      : [];\n    setUsedIngredients(mealsIngredients);\n  }, [id, inProgressRecipes]);\n\n  const { strMealThumb,\n    strMeal,\n    strCategory,\n    strInstructions,\n    strArea,\n    strTags } = recipe;\n\n  function GetDate() {\n    const data = new Date();\n    const dia = String(data.getDate()).padStart(2, '0');\n    const mes = String(data.getMonth() + 1).padStart(2, '0');\n    const ano = data.getFullYear();\n    const dataAtual = `${dia}/${mes}/${ano}`;\n    return dataAtual;\n  }\n\n  console.log(recipe);\n\n  const saveDone = {\n    id,\n    type: 'comida',\n    area: strArea,\n    category: strCategory,\n    alcoholicOrNot: '',\n    name: strMeal,\n    image: strMealThumb,\n    doneDate: GetDate(),\n    tags: strTags ? strTags.split(',') : [],\n  };\n\n  return (\n    <div>\n      <img src={ strMealThumb } data-testid=\"recipe-photo\" alt={ strMeal } />\n      <h3 data-testid=\"recipe-title\">{ strMeal }</h3>\n      <ShareButton link={ window.location.href.slice(0, SLICE_NUMBER) } />\n      <FavoriteButton recipeData={ recipe } type=\"comida\" />\n      <p data-testid=\"recipe-category\">{ strCategory }</p>\n      <form>\n        {\n          listIngredients().map((ingredient, index) => (\n            <label\n              className={\n                usedIngredients.includes(ingredient) ? 'ingredient-checked' : ''\n              }\n              htmlFor={ index }\n              data-testid={ `${index}-ingredient-step` }\n              key={ index }\n            >\n              <input\n                checked={ usedIngredients.includes(ingredient) }\n                value={ ingredient }\n                type=\"checkbox\"\n                id={ index }\n                name=\"ingredients\"\n                onClick={ lineThroughUsedIngredients }\n              />\n              { ingredient }\n\n            </label>\n          ))\n        }\n      </form>\n      <p data-testid=\"instructions\">{ strInstructions }</p>\n      <Link to=\"/receitas-feitas\">\n        <button\n          type=\"button\"\n          data-testid=\"finish-recipe-btn\"\n          disabled={ listIngredients().length !== usedIngredients.length }\n          onClick={ () => saveDoneRecipes(saveDone, setDoneRecipes) }\n        >\n          Finalizar Receita\n        </button>\n      </Link>\n    </div>\n  );\n}\n\nFoodRecipeInProgress.propTypes = {\n  match: PropTypes.shape(PropTypes.any).isRequired,\n};\n\nexport default FoodRecipeInProgress;\n"]},"metadata":{},"sourceType":"module"}