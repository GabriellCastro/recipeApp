{"ast":null,"code":"var _jsxFileName = \"/home/gabriel/project/sd-011-project-recipes-app/src/pages/RecipeDetails.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { getDrinkDetail, getDrinkRecomendations } from '../services/theCockTailAPI';\nimport { getMealDetail, getMealRecomendations } from '../services/theMealAPI';\nimport Recommendations from '../components/Recommendations';\nimport VerifyStart from '../components/VerifyStart';\nimport ShareButton from '../components/ShareButton';\nimport FavoriteButton from '../components/FavoriteButton';\nimport RecipeDetailsCategory from '../components/RecipeDetailsCategory';\nimport RecipeDetailsIframe from '../components/RecipeDetailsIframe';\n\nfunction RecipeDetails({\n  match: {\n    params: {\n      id\n    }\n  }\n}) {\n  const [recipeData, setRecipeData] = useState({\n    strYoutube: ''\n  });\n  const [recomendedRecipe, setRecomendedRecipe] = useState([]);\n  const MAX_RESULTS = 6;\n  const {\n    pathname\n  } = useLocation();\n  const recipeType = pathname.includes('comidas') ? 'comida' : 'bebida';\n  const {\n    strDrink,\n    strMeal,\n    strDrinkThumb,\n    strMealThumb,\n    strCategory,\n    strInstructions,\n    strAlcoholic,\n    strYoutube\n  } = recipeData;\n  const MAX_INGREDIENTS = 20;\n  const thumb = strDrinkThumb || strMealThumb;\n  const title = strDrink || strMeal;\n  useEffect(() => {\n    if (recipeType === 'bebida') {\n      const getDataDrinkDetail = async () => {\n        const data = await getDrinkDetail(id);\n        setRecipeData(...data);\n      };\n\n      getDataDrinkDetail();\n    } else {\n      const getFoodDetail = async () => {\n        const data = await getMealDetail(id);\n        setRecipeData(...data);\n      };\n\n      getFoodDetail();\n    }\n  }, [id, recipeType]);\n  useEffect(() => {\n    if (recipeType === 'bebida') {\n      const fetchRecomended = async () => {\n        const recomendedArray = await getMealRecomendations();\n        setRecomendedRecipe(recomendedArray);\n      };\n\n      fetchRecomended();\n    } else {\n      const fetchRecomended = async () => {\n        const recomendedArray = await getDrinkRecomendations();\n        setRecomendedRecipe(recomendedArray);\n      };\n\n      fetchRecomended();\n    }\n  }, [recipeType]);\n\n  function listIngredients() {\n    const list = [];\n\n    for (let index = 1; index <= MAX_INGREDIENTS; index += 1) {\n      if (recipeData[`strIngredient${index}`]) {\n        list.push(`${recipeData[`strIngredient${index}`]} - ${recipeData[`strMeasure${index}`]}`);\n      }\n    }\n\n    return list;\n  }\n\n  function renderDetails() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      \"data-testid\": \"recipe-photo\",\n      src: thumb,\n      alt: title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"recipe-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, title), /*#__PURE__*/React.createElement(ShareButton, {\n      link: window.location.href,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(FavoriteButton, {\n      recipeData: recipeData,\n      type: recipeType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(RecipeDetailsCategory, {\n      strAlcoholic: strAlcoholic,\n      strCategory: strCategory,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, listIngredients().map((ingredient, index) => /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      \"data-testid\": `${index}-ingredient-name-and-measure`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }, `${ingredient}`))), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"instructions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, strInstructions), /*#__PURE__*/React.createElement(RecipeDetailsIframe, {\n      recipeType: recipeType,\n      strYoutube: strYoutube,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Recommendations, {\n      recommendations: recomendedRecipe.slice(0, MAX_RESULTS),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(VerifyStart, {\n      id: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, recipeData && renderDetails());\n}\n\nRecipeDetails.propTypes = {\n  match: PropTypes.shape(PropTypes.any).isRequired\n};\nexport default RecipeDetails;","map":{"version":3,"sources":["/home/gabriel/project/sd-011-project-recipes-app/src/pages/RecipeDetails.js"],"names":["React","useState","useEffect","useLocation","PropTypes","getDrinkDetail","getDrinkRecomendations","getMealDetail","getMealRecomendations","Recommendations","VerifyStart","ShareButton","FavoriteButton","RecipeDetailsCategory","RecipeDetailsIframe","RecipeDetails","match","params","id","recipeData","setRecipeData","strYoutube","recomendedRecipe","setRecomendedRecipe","MAX_RESULTS","pathname","recipeType","includes","strDrink","strMeal","strDrinkThumb","strMealThumb","strCategory","strInstructions","strAlcoholic","MAX_INGREDIENTS","thumb","title","getDataDrinkDetail","data","getFoodDetail","fetchRecomended","recomendedArray","listIngredients","list","index","push","renderDetails","window","location","href","map","ingredient","slice","propTypes","shape","any","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { getDrinkDetail, getDrinkRecomendations } from '../services/theCockTailAPI';\nimport { getMealDetail, getMealRecomendations } from '../services/theMealAPI';\nimport Recommendations from '../components/Recommendations';\nimport VerifyStart from '../components/VerifyStart';\nimport ShareButton from '../components/ShareButton';\nimport FavoriteButton from '../components/FavoriteButton';\nimport RecipeDetailsCategory from '../components/RecipeDetailsCategory';\nimport RecipeDetailsIframe from '../components/RecipeDetailsIframe';\n\nfunction RecipeDetails({ match: { params: { id } } }) {\n  const [recipeData, setRecipeData] = useState({ strYoutube: '' });\n  const [recomendedRecipe, setRecomendedRecipe] = useState([]);\n  const MAX_RESULTS = 6;\n  const { pathname } = useLocation();\n  const recipeType = pathname.includes('comidas') ? 'comida' : 'bebida';\n  const {\n    strDrink,\n    strMeal,\n    strDrinkThumb,\n    strMealThumb,\n    strCategory,\n    strInstructions,\n    strAlcoholic,\n    strYoutube,\n  } = recipeData;\n  const MAX_INGREDIENTS = 20;\n  const thumb = strDrinkThumb || strMealThumb;\n  const title = strDrink || strMeal;\n\n  useEffect(() => {\n    if (recipeType === 'bebida') {\n      const getDataDrinkDetail = async () => {\n        const data = await getDrinkDetail(id);\n        setRecipeData(...data);\n      };\n      getDataDrinkDetail();\n    } else {\n      const getFoodDetail = async () => {\n        const data = await getMealDetail(id);\n        setRecipeData(...data);\n      };\n      getFoodDetail();\n    }\n  }, [id, recipeType]);\n\n  useEffect(() => {\n    if (recipeType === 'bebida') {\n      const fetchRecomended = async () => {\n        const recomendedArray = await getMealRecomendations();\n        setRecomendedRecipe(recomendedArray);\n      };\n      fetchRecomended();\n    } else {\n      const fetchRecomended = async () => {\n        const recomendedArray = await getDrinkRecomendations();\n        setRecomendedRecipe(recomendedArray);\n      };\n      fetchRecomended();\n    }\n  }, [recipeType]);\n\n  function listIngredients() {\n    const list = [];\n    for (let index = 1; index <= MAX_INGREDIENTS; index += 1) {\n      if (recipeData[`strIngredient${index}`]) {\n        list.push(\n          `${recipeData[`strIngredient${index}`]} - ${recipeData[`strMeasure${index}`]}`,\n        );\n      }\n    }\n    return list;\n  }\n\n  function renderDetails() {\n    return (\n      <section>\n        <img data-testid=\"recipe-photo\" src={ thumb } alt={ title } />\n        <h2 data-testid=\"recipe-title\">{ title }</h2>\n        <ShareButton link={ window.location.href } />\n        <FavoriteButton recipeData={ recipeData } type={ recipeType } />\n        <RecipeDetailsCategory\n          strAlcoholic={ strAlcoholic }\n          strCategory={ strCategory }\n        />\n        <ol>\n          {\n            listIngredients().map((ingredient, index) => (\n              <li\n                key={ index }\n                data-testid={ `${index}-ingredient-name-and-measure` }\n              >\n                { `${ingredient}` }\n              </li>\n            ))\n          }\n        </ol>\n        <p data-testid=\"instructions\">{strInstructions}</p>\n        <RecipeDetailsIframe recipeType={ recipeType } strYoutube={ strYoutube } />\n        <Recommendations recommendations={ recomendedRecipe.slice(0, MAX_RESULTS) } />\n        <VerifyStart id={ id } />\n      </section>\n    );\n  }\n\n  return (\n    <div>{ recipeData && renderDetails() }</div>\n  );\n}\n\nRecipeDetails.propTypes = {\n  match: PropTypes.shape(PropTypes.any).isRequired,\n};\n\nexport default RecipeDetails;\n"]},"metadata":{},"sourceType":"module"}